const q1 = (calculate) => {
  const array = calculate.split('');
  const stack = [];
  let postfix = '';

  const priority = {
    '+': 1,
    '-': 1,
    '/': 2,
    '*': 2,
    '(': 0,
    ')': 0,
  }

  array.forEach((item) => {
    if (Number(item)) {
      postfix += item;
    } else {
      if (!stack.length || item === '(') {
        stack.push(item);
      } else if (item === ')') {
        while (true) {
          if (!stack.length || stack[stack.length - 1] === '(') {
            stack.pop();
            break;
          }
          postfix += stack.pop();
        }
      } else if (priority[stack[stack.length - 1]] < priority[item]) {
        stack.push(item);
      } else if (priority[stack[stack.length - 1]] >= priority[item]) {
        while (true) {
          if (!stack.length || priority[stack[stack.length - 1]] < priority[item]) {
            break;
          }
          postfix += stack.pop();
        }
        stack.push(item);
      }
    }
  });

  while (stack.length > 0) {
    postfix += stack.pop();
  }

  return postfix;
};

test('test', () => {
  expect(q1('3+5*2/(7-2)')).toEqual('352*72-/+');
  expect(q1('3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9+3*(5+2)-9')).toEqual('352+*9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-352+*+9-');
});
